#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Dec  3 14:02:05 2021

@author: Emilie Mauduit
"""

from math import pow
import numpy as np

import logging
log = logging.getLogger('palantir.prediction_tools.emission')

# ============================================================= #
# -------------------------- Emission ------------------------- #
# ============================================================= #


class Emission:
    def __init__(
        self,
        name: str,
        mag_field: dict,
        pow_emission: dict,
        pow_received: dict,
        fmax_star: dict,
    ):
        """Creates a Target object.
        :param name:
            Name of the target.
        :type name:
            str
        :param mag_field:
            Dictionnary with the relevant Planet and MagneticMoment objects to compute the magnetic field generated by the dynamo at the planet.
        :type mag_field:
            dict
        :param pow_emission:
            Dictionnary with the relevant Planet, Star, MagneticMoment, StellarWind and sw_jupiter objects to compute both the kinetic and magnetic power of the emission.
        :type pow_emission:
            fdict
        :param pow_received:
            Dictionnary with the relevant Star object to compute both kinetic and magnetic power of the emission at Earth.
        :type pow_received:
            dict
        :param fmax_star:
            Maximum frequency of the emission at the star, in Hz.
        :type fmax_star:
            float
        """

        self.name = name
        self.mag_field_planet = mag_field
        self._freq_max_planet = None
        self.freq_max_star = fmax_star
        self.pow_emission_kinetic = pow_emission
        self.pow_emission_magnetic = pow_emission
        self.pow_emission_spi = pow_emission
        self._flux_kinetic_au = None
        self._flux_magnetic_au = None
        self._flux_spi_au = None
        self.pow_received_kinetic = pow_received
        self.pow_received_magnetic = pow_received
        self.pow_received_spi = pow_received

    def __str__(self):
        return("Maximum frequency emission at the planet : fcp_max = {} MHz \n".format(self.freq_max_planet * 1e-6)
            + "Maximum frequency emission at the star : fc*_max = {} MHz \n".format(self.freq_max_star * 1e-6)
            + "Maximum magnetic field at the planet : Bpla = {} T\n".format(self.mag_field_planet)
            + "Kinetic power of the emission at the system : Pkin_em = {} .10^14 W\n".format(self.pow_emission_kinetic / 1e14)
            + "Magnetic power of the emission at the system : Pmag_em = {} .10^14 W\n".format(self.pow_emission_magnetic / 1e14)
            + "SPI power of the emission at the system : Pspi_em = {} .10^14 W\n".format(self.pow_emission_spi / 1e14)
            + "Kinetic flux of the emission emitted at 1 AU : phi_kin_au = {} .10^10 Jy\n".format(self.flux_kinetic_au / 1e-26 / 1e10)
            + "Magnetic flux of the emission emitted at 1 AU : phi_mag_au = {} .10^10 Jy\n".format(self.flux_magnetic_au / 1e-26 / 1e10)
            + "SPI flux of the emission emitted at 1 AU : phi_spi_au = {} .10^10 Jy\n".format(self.flux_spi_au / 1e-26 / 1e10)
            + "Kinetic flux of the emission received by the instrument : phi_kin = {} mJy\n".format(self._pow_received_kinetic * 1e3 / 1e-26)
            + "Magnetic flux of the emission received by the instrument : phi_mag = {} mJy\n".format(self._pow_received_magnetic * 1e3 / 1e-26)
            + "SPI flux of the emission received by the instrument : phi_spi = {} mJy\n".format(self._pow_received_spi * 1e3 / 1e-26)
        )

    # --------------------------------------------------------- #
    # ------------------------ Methods ------------------------ #

    @property
    def mag_field_planet(self):
        return self._mag_field_planet

    @mag_field_planet.setter
    def mag_field_planet(self, value: dict):
        if "planet" not in value or "magnetic_moment" not in value:
            log.error('KeyError : planet or magnetic_moment not in value')
            raise KeyError("planet or magnetic_moment not in value")
        planet = value["planet"]
        magnetic_moment = value["magnetic_moment"]
        mag_moment_jup = 1.56e27  # A.m-2
        self._mag_field_planet = (
            1e-7
            * 2
            * magnetic_moment.mag_moment
            * mag_moment_jup
            / pow(planet.unnormalize_radius(), 3)
        )

    #=============== Frequencies ===============#

    @property
    def freq_max_planet(self):
        if self._freq_max_planet is None:
            me = 9.1093897e-31  # kg
            e = 1.60217733e-19  # C
            self._freq_max_planet = e * self.mag_field_planet / (2 * np.pi * me)
        return self._freq_max_planet

    @property
    def freq_max_star(self):
        return self._freq_max_star

    @freq_max_star.setter
    def freq_max_star(self, value: dict):
        if "star" not in value:
            log.error('KeyError : star not in value')
            raise KeyError("star not in value")
        me = 9.1093897e-31  # kg
        e = 1.60217733e-19  # C
        self._freq_max_star = e * value["star"].magfield / (2 * np.pi * me)

    #=============== Powers emitted ===============#

    @property
    def pow_emission_kinetic(self):
        return self._pow_emission_kinetic

    @pow_emission_kinetic.setter
    def pow_emission_kinetic(self, value: dict):
        if (
            "planet" not in value
            or "star" not in value
            or "magnetic_moment" not in value
            or "stellar_wind" not in value
        ):
            log.error('KeyError : planet or star or magnetic_moment not in value')
            raise KeyError(
                "planet or star or magnetic_moment or stellar_wind not in value"
            )
        prad_jup = 2.1e11  # W
        standoff_dist_jup = 40.1  # RJ
        density_jup = 1.98e5  # m-3
        veff_jup = 523e3  # m/s

        self._pow_emission_kinetic = (
            prad_jup
            * pow(value["planet"].radius, 2)
            * pow(
                (
                    value["magnetic_moment"].normalize_standoff_dist(
                        planet=value["planet"]
                    )
                    / standoff_dist_jup
                ),
                2,
            )
            * (value["stellar_wind"].density / density_jup)
            * pow(value["stellar_wind"].effective_velocity / veff_jup, 3)
        )

    @property
    def pow_emission_magnetic(self):
        return self._pow_emission_magnetic

    @pow_emission_magnetic.setter
    def pow_emission_magnetic(self, value: dict):
        if (
            "magnetic_moment" not in value
            or "stellar_wind" not in value
        ):
            log.error("KeyError:magnetic_moment or stellar_wind not in value.")
            raise KeyError(
                "magnetic_moment or stellar_wind not in value"
            )
        beta = 2e-3 
        self._pow_emission_magnetic = ( beta * np.pi
            * value["stellar_wind"].effective_velocity 
            * pow(value["stellar_wind"].mag_field, 2)
            * pow(value["magnetic_moment"].standoff_dist,2)
            ) / (4e-7 * np.pi)

    @property
    def pow_emission_spi(self):
        return self._pow_emission_spi

    @pow_emission_spi.setter
    def pow_emission_spi(self, value: dict):
        if (
            "planet" not in value
            or "star" not in value
            or "magnetic_moment" not in value
            or "stellar_wind" not in value
            or "sw_jupiter" not in value
        ):
            log.error("KeyError: planet or star or magnetic_moment or stellar_wind or sw_jupiter not in value.")
            raise KeyError(
                "planet or star or magnetic_moment or stellar_wind or sw_jupiter not in value"
            )

        if value["stellar_wind"].alfven_velocity < value["stellar_wind"].effective_velocity :
            self._pow_emission_spi = np.nan
        else :
            if not np.isnan(self._mag_field_planet) :
                self._pow_emission_spi = self.pow_emission_magnetic
            else :
                R_iono = value["planet"].unnormalize_radius() * 1.2
                beta = 2e-3 
                self._pow_emission_spi = ( beta * np.pi
                * value["stellar_wind"].effective_velocity
                * pow(value["stellar_wind"].mag_field , 2)
                * pow(R_iono,2)
                ) / (4e-7 * np.pi)

    #=============== Flux at 1AU ===============#

    @property
    def flux_kinetic_au(self):
        if self._flux_kinetic_au is None:
            dua = 1.49597870700e11  # m
            try :
                self._flux_kinetic_au = self._pow_emission_kinetic / (
                    1.6 * 0.25 * self.freq_max_planet * (dua**2)
                )
            except(ZeroDivisionError):
                self._flux_kinetic_au = np.nan
        return self._flux_kinetic_au

    @property
    def flux_magnetic_au(self):
        if self._flux_magnetic_au is None:
            dua = 1.49597870700e11  # m
            try :
                self._flux_magnetic_au = self._pow_emission_magnetic / (
                    1.6 * 0.25 * self.freq_max_planet * (dua**2)
                )
            except(ZeroDivisionError):
                self._flux_magnetic_au = np.nan
        return self._flux_magnetic_au

    @property
    def flux_spi_au(self):
        if self._flux_spi_au is None:
            dua = 1.49597870700e11  # m
            try :
                self._flux_spi_au = self._pow_emission_spi / (
                    0.16 * 0.25 * self.freq_max_star * (dua**2)
                )
            except(ZeroDivisionError):
                self._flux_spi_au = np.nan
        return self._flux_spi_au

    #=============== Powers received at Earth ===============#

    @property
    def pow_received_kinetic(self):
        return self._pow_received_kinetic

    @pow_received_kinetic.setter
    def pow_received_kinetic(self, value: dict):
        if "star" not in value:
            log.error("KeyError: star not in value.")
            raise KeyError("star not in value")

        pc = 3.08568e16  # m
        try : 
            self._pow_received_kinetic = self._pow_emission_kinetic / (
                1.6 * 0.25 * self.freq_max_planet * pow(value["star"].obs_dist * pc, 2)
            )
        except (ZeroDivisionError):
            self._pow_received_kinetic = np.nan

    @property
    def pow_received_magnetic(self):
        return self._pow_received_magnetic

    @pow_received_magnetic.setter
    def pow_received_magnetic(self, value: dict):
        if "star" not in value:
            log.error("KeyError: star not in value.")
            raise KeyError("star not in value")

        pc = 3.08568e16  # m
        try :
            self._pow_received_magnetic = self._pow_emission_magnetic / (
                1.6 * 0.25 * self.freq_max_planet * pow(value["star"].obs_dist * pc, 2)
            )
        except (ZeroDivisionError):
            self._pow_received_magnetic = np.nan

    @property
    def pow_received_spi(self):
        return self._pow_received_spi

    @pow_received_spi.setter
    def pow_received_spi(self, value: dict):
        if "star" not in value:
            log.error("KeyError: star not in value.")
            raise KeyError("star not in value")

        pc = 3.08568e16  # m
        try :
            self._pow_received_spi = self._pow_emission_spi / (
                0.16 * 0.25 * self.freq_max_star * pow(value["star"].obs_dist * pc, 2)
            )
        except (ZeroDivisionError):
            self._pow_received_spi = np.nan
